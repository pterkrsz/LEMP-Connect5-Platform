LEMP és KEP interfész követelmények – Roadmap feladatlista
Szoftveres elvárások
Fejlett jogosultságkezelő rendszer kialakítása: A LEMP szoftverben olyan jogosultságkezelést kell megvalósítani, amely támogatja a felhasználói adathozzáférések szerepkörök szerinti korlátozását, és lehetőséget ad a felhasználói körök (szerepkörök) későbbi bővítésére.
Kéttényezős felhasználói hitelesítés (2FA): Biztosítani kell, hogy az arra kijelölt felhasználók csak kétfaktoros hitelesítéssel (egy authentikációs mobilalkalmazás segítségével) tudjanak bejelentkezni a rendszerbe, növelve ezzel a hozzáférés biztonságát.
Titkosított adatbázis használata: A LEMP minden bizalmas és érzékeny adatot titkosított adatbázisban tároljon, hogy illetéktelenek ne férhessenek hozzá a tárolt információkhoz közvetlenül.
Naplózás, mentés és védelem a törvényi előírások szerint: A rendszerben ki kell építeni a jogszabályoknak megfelelő naplózási, adatmentési és védelmi funkciókat. Minden releváns eseményt naplózni kell, rendszeres biztonsági mentést kell végezni, és gondoskodni kell a naplók védelméről a 2013. évi L. törvény 4. besorolási osztályának megfelelően.
KEP-kompatibilis törzsadat-kezelés: A LEMP-nek kezelnie kell a KEP-LEMP interfészen keresztül átadandó valamennyi törzsadatot a dokumentáció 7. pontjában meghatározott hierarchikus struktúrában. Ez biztosítja, hogy az intézmények alapadatai (pl. telephelyek, eszközök metaadatai) a KEP által elvárt formában álljanak rendelkezésre.
Almérős fogyasztási adatok tárolása: A LEMP-ben tárolni kell a nagyfogyasztói almérők által mért fázisonkénti hatásos és meddő energiafogyasztási adatokat 15 perces felbontásban, és ezeket az adatokat a KEP rendszer részére hozzáférhetővé kell tenni az interfészen keresztül. Ezen felül a LEMP belső üzleti logikája érdekében 5 perces felbontásban is eltárolja ugyanezen mérési adatokat a részletesebb elemzésekhez.
IoT szenzoradatok kezelése: A LEMP-hez csatlakozó IoT szenzorok adatait olyan formátumban és gyakorisággal kell rögzíteni, hogy azokat a KEP-LEMP interfész elvárásai szerint továbbítani lehessen a KEP felé. A szenzoradatok gyűjtése és tárolása igazodjon a központi rendszer által elvárt felbontáshoz és adattartalomhoz.
Bővíthető IoT eszköz-integrációs modul: A LEMP szoftvernek rendelkeznie kell egy bővíthető REST API modullal, amelyhez új IoT eszközök és szenzorok könnyen csatlakoztathatók. Ennek révén biztosítható, hogy az újonnan bekötött érzékelők adatai szükség esetén átadhatók legyenek a KEP rendszernek az interfészen keresztül.
Kimeneti vezérlő API modul: A LEMP szoftvernek biztosítania kell egy kimeneti (LEMP->KEP irányú) REST API felületet, amelyen a KEP rendszer vezérlési utasításai fogadhatók. A LEMP-nek garantálnia kell, hogy a beérkező parancsokat az eszközökön a szükséges időn belül végrehajtja az effektív beavatkozás érdekében.
Gépi tanuláson alapuló analitika és menetrend-tervezés: A LEMP-hez fejlett analitikai modult kell fejleszteni, amely gépi tanulási algoritmusokkal képes az adott intézmény számára optimális villamosenergia-fogyasztási és termelési menetrendet készíteni. Fontos: a lokálisan generált menetrend nem írhatja felül a KEP-től érkező vezérlési utasításokat, azaz a központ döntései elsőbbséget élveznek. Az algoritmusnak a villamos adatokon túl figyelembe kell vennie releváns környezeti paramétereket is (pl. napelemek esetén a beesési szöget, felhőzetet), mivel ezek befolyásolhatják az energiatermelést és -fogyasztást.
Riportkészítő modul: Lehetővé kell tenni a felhasználók számára, hogy egyedi és ütemezett riportokat állítsanak össze a LEMP-ben tárolt adatokból. A riportokat a rendszer biztosítsa exportálható formában – például grafikonos és táblázatos jelentésként –, hogy a felhasználók lementhessék és elemezhessék az energiafelhasználási adatokat.
Grafikus adatelemző felület: A LEMP szoftverben ki kell alakítani egy áttekinthető, interaktív grafikus felületet, amelyen a tárolt energiaadatok tetszőlegesen választható időszakra és felbontással megjeleníthetők. A rendszer jelenítse meg az adatokat diagrammok és táblázatok formájában is, ügyelve arra, hogy az adatok a választott felbontáson értelmezhetőek maradjanak.
Hardveres elvárások
Helyi telepítésű platform és infrastruktúra: A LEMP szoftvert minden érintett közintézményben helyben telepített, önálló platformként kell üzemeltetni. Minden intézmény saját LEMP példánnyal rendelkezzen, amely saját adatbázist, üzleti logikát és felhasználói felületet futtat az adott épület energiaadatainak kezeléséhez. Ez biztosítja a rendszer decentralizáltságát és azt, hogy az intézmény adatai helyben is elérhetők és kezelhetők legyenek.
Mérőeszközök és szenzorok integrálása: Gondoskodni kell róla, hogy az intézményekben megfelelő hardveres eszközök álljanak rendelkezésre az adatok gyűjtéséhez. Telepíteni szükséges a nagyfogyasztói almérőket az egyes fő fogyasztók mérésére, amelyek 15 perces bontású fogyasztási adatokat szolgáltatnak a LEMP számára. Emellett IoT szenzorokkal kell felszerelni az épületeket (pl. hőmérséklet-, fény- vagy mozgásérzékelők), hogy a környezeti és működési paraméterek folyamatosan gyűjthetők legyenek. Ezeket a szenzorokat integrálni kell a LEMP rendszerbe, biztosítva, hogy adataik eljussanak a platformhoz és onnan továbbíthatók legyenek a központi rendszer felé.
Interfészek és adatkapcsolatok
REST API és titkosított adatkapcsolat: Minden KEP–LEMP közötti interfészt szabványos RESTful API formájában kell megvalósítani, HTTPS protokollt használva. Az API-hívások során biztosítani kell a tanúsítvány alapú TLS titkosítást és az átadott adatok fogadó oldali validálását, ezzel garantálva az adatkapcsolat biztonságát és integritását.
Almérő törzsadatok lekérdezése (Interfész #1): A KEP rendszer ütemezett időközönként lekéri a LEMP-től az épületben felszerelt nagyfogyasztói almérők törzsadatait (pl. almérők azonosítói, telepítési helye). Ezen adat interfész esetében a LEMP a szolgáltató/forrás komponens, míg a KEP a lekérdező fél, az adatátadás kezdeményezője mindig a KEP rendszer.
Almérők fogyasztási adatainak lekérdezése (Interfész #2): A KEP rendszer előre meghatározott gyakorisággal (ütemezetten) kér le 15 perces bontású fogyasztási mérőadatokat a LEMP-től a nagyfogyasztói almérők energiafelhasználásáról. A LEMP ebben az adat interfészben is szolgáltató szerepet tölt be, a KEP pedig az ügyfél (kliens) szerepében az API-hívások kezdeményezője.
IoT szenzorok törzsadatainak lekérdezése (Interfész #3): A KEP rendszer ütemezetten lekéri a LEMP-től a rendszerhez csatlakoztatott IoT szenzorok alap/törzsadatait (például szenzorazonosító, szenzor típusa, telepítési helye stb.). Az adatkérés REST API-n keresztül történik, a LEMP a forrás, a KEP a kérés kezdeményezője.
IoT szenzorok mérési adatainak lekérdezése (Interfész #4): A KEP rendszer által meghatározott időközönként a LEMP-től lekérdezhetők az IoT szenzorok által mért aktuális adatok. A LEMP ebben az interfészben a szenzoradatok forrása, és válaszként szolgáltatja a kért időszaki mérési értékeket (pl. hőmérséklet, páratartalom) a KEP felé. Minden lekérdezés biztonságos csatornán (HTTPS) történik, az adatok titkosítva kerülnek átadásra.
Közintézményi törzsadatok lekérdezése (Interfész #5): A KEP rendszer időszakosan lekéri a LEMP-től az adott intézményre vonatkozó törzsadatokat (például telephelyek üzleti adatai, szerződéses azonosítók, kapcsolattartói információk). Az átadás ütemezetten zajlik a KEP kérésére, a LEMP pedig az aktuális törzsadatokat szolgáltatja a központi platform számára, így biztosítva az intézményi adatok naprakész szinkronizációját.
Inverter eszközök vezérlése (Interfész #6): A szolgáltatás interfész keretében a KEP rendszer vezérlő utasításokat küld a LEMP felé az épületben telepített inverter típusú eszközök (pl. akkumulátoros energiatárolók vagy napelemes inverterek) működésének szabályozására. A kommunikáció ütemezetten, biztonságos REST API hívásokkal zajlik (a KEP itt is kliensként kezdeményez). A LEMP fogadja a vezérlési parancsokat és végrehajtja a szükséges műveleteket az invertereken, biztosítva ezzel a helyi energiatárolók optimális vezérlését.
Ki-/bekapcsolható eszközök vezérlése (Interfész #7): A KEP rendszer utasításokat küld a LEMP-nek az épületben található ki- és bekapcsolható berendezések (pl. szellőzők, világítás, gépek) távoli vezérlésére. A LEMP az eszközvezérlő szolgáltatás interfészen keresztül fogadja ezeket a parancsokat, és a megadott ütemezés szerint végrehajtja az eszközök kapcsolását. Mindez HTTPS protokollon keresztül, titkosított módon történik, a LEMP pedig gondoskodik az utasítások sikeres végrehajtásáról és visszajelzéséről a KEP felé.
Integrációs elvárások
Folyamatos és biztonságos KEP–LEMP kapcsolat: Biztosítani kell a LEMP és a központi KEP rendszer közötti állandó adatkommunikációt a definiált API interfészen keresztül. Mivel a LEMP decentralizált rendszerként folyamatos kapcsolatban áll a KEP-pel, az integrációnak meg kell felelnie a 2013. évi L. törvény szerinti 4-es biztonsági osztály előírásainak (kiemelten a védelmi intézkedésekre és adatszivárgás megakadályozására vonatkozóan). A kapcsolatnak megbízhatónak és magas rendelkezésre állásúnak kell lennie, hogy az adatcsere zökkenőmentes legyen.
Adatátvitel ütemezett lekérdezésekkel (pull modell): Az integráción belül az adatáramlást a KEP rendszer kezdeményezi ütemezett lekérdezésekkel. Minden adatkapcsolat előre meghatározott időközönként, nem valós idejű streaming formájában történik, hanem időzítetten a szükséges gyakorisággal. A KEP mint kliens kérdez le minden szükséges adatot a LEMP-től, a LEMP pedig válaszoló félként szolgáltatja az adatokat. Ez a pull jellegű megoldás biztosítja, hogy a központi platform kontrollálja az adatgyűjtés ütemét és terhelését.
Magyarországi felhő infrastruktúra használata: Ha a LEMP rendszer bármilyen felhőalapú adatmegosztást vagy -tárolást alkalmaz, akkor kizárólag olyan felhőszolgáltatót szabad igénybe venni, amely garantálja, hogy az adatok fizikai tárolása Magyarország területén belül történik. Ez megfelel a vonatkozó adatbiztonsági és szuverenitási követelményeknek, és biztosítja az adatok hazai joghatóság alatt maradását.
IoT eszközök integrációjának támogatása: Az integrációnak ki kell terjednie a helyi IoT ökoszisztémára is. Gondoskodni kell arról, hogy újonnan telepített érzékelők és eszközök könnyen bekapcsolhatók legyenek a LEMP rendszer adatáramlásába. Ennek érdekében a LEMP-ben lévő bővíthető API modul tegye lehetővé új IoT eszközök regisztrálását és adataik fogadását, majd továbbítását a KEP felé a szabványos interfészen keresztül. Így a rendszer rugalmasan bővíthető marad a jövőben felmerülő további mérőeszközökkel.
Vezérlési utasítások gyors végrehajtása: Biztosítani kell, hogy a KEP által küldött vezérlési parancsok a LEMP-en keresztül a lehető legrövidebb idő alatt célba érjenek és végrehajtódjanak. Az integrációnak támogatnia kell a központi utasítások közel valós idejű feldolgozását a helyi eszközökön, minimalizálva a késleltetést. Így például ha a KEP egy terhelés lekapcsolását vagy egy berendezés beindítását rendeli el, a LEMP rendszer a parancsot azonnal fogadja és végrehajtja a helyszínen a hatásos beavatkozás érdekében.
Megvalósítási követelmények és ajánlott architektúra
Szabványos hitelesítési protokollok alkalmazása: A rendszerben a felhasználók azonosítására és az engedélyek kezelésére OAuth 2.0 vagy OpenID Connect alapú hitelesítési megoldásokat ajánlott használni. Ezek bevált szabványok, amelyek magas biztonsági szintet nyújtanak a beléptetéshez és az autentikációhoz, és könnyen integrálhatók a webes környezetbe.
API kulcsok és token alapú autentikáció: Minden külső API-hívást egyedi API kulccsal kell hitelesíteni, amely csak a szükséges funkciókhoz biztosít hozzáférést az adott kliensnek. Emellett implementáljunk token-alapú hitelesítést – például JWT (JSON Web Token) használatával – az API kommunikációban, hogy az egyes kérések érvényességét egyszerűen és biztonságosan lehessen ellenőrizni. A tokenek használata csökkenti a szerver terhelését és egyszerűsíti a jogosultság-ellenőrzést a hívások során.
Szerepkör-alapú hozzáférés-szabályozás (RBAC): A rendszerben a hozzáférési jogosultságokat szerepkörökhöz kötötten kell meghatározni. Minden felhasználó csak azokat a funkciókat és adatokat érhesse el, amelyek az ő szerepköréhez tartozó engedélyezési szintbe beleférnek. A RBAC megvalósítása biztosítja az egyedi jogosultságok finomhangolását és az adatokhoz való hozzáférés korlátozását a felhasználók szerepe alapján.
Titkosított kommunikáció (HTTPS/TLS): A KEP és LEMP közötti összes kommunikációt TLS protokollal védett HTTPS kapcsolaton keresztül kell bonyolítani. A titkosított csatorna megakadályozza az adatok lehallgatását és illetéktelen kiolvasását az interneten keresztüli adatforgalom során. Ügyelni kell arra is, hogy az API-hívások során továbbított érzékeny információk (pl. jelszavak, személyes adatok) mindig titkosítva legyenek, mind a szállítás, mind a tárolás során.
API hozzáférés korlátozása és integritásvédelem: Be kell vezetni megfelelő CORS (Cross-Origin Resource Sharing) szabályozást, hogy csak meghatározott és megbízható domain-ek kezdeményezhessenek API-hívásokat a rendszer felé. Ezzel párhuzamosan gondoskodni kell az adatok integritásáról is: használjunk digitális aláírásokat vagy ellenőrzőösszegeket az adatokhoz, hogy észleljük az esetleges sérülést vagy illetéktelen módosítást az átviteli út során. Továbbá minden üzenetet lássunk el időbélyeggel, hogy elkerülhessük az ún. replay (ismétlési) támadásokat, amikor régi üzenetek újra lejátszásával próbálnának visszaélést elkövetni.
Túlterhelés elleni védelem és IP-szűrés: Az API szolgáltatásait védeni kell a túlterheléses és rosszindulatú hívások ellen. Implementáljunk rate limiting mechanizmust, ami korlátozza egy adott időszak alatt a megengedett hívások számát felhasználónként vagy IP-címenként, így megelőzve a szolgáltatás túlterhelését vagy szándékos terhelését. Emellett vezessünk be IP-cím alapú hozzáférés-korlátozást, amely csak előre engedélyezett, megbízható IP-cím tartományokból engedi az API elérését, minden más forrást blokkolva ezzel a jogosulatlan hozzáférés ellen.
Érzékeny adatok védelme és naplózás: Az alkalmazásban hash-eléssel vagy titkosítással kell tárolni minden érzékeny adatot, különösen a felhasználói jelszavakat és személyes információkat, hogy egy esetleges adatbázis-hozzáférés se fedje fel ezeket egyértelműen. Ezenfelül ki kell alakítani egy átfogó auditálási és naplózási rendszert, amely minden API-hívást naplóz (a kérések és válaszok releváns adataival és időbélyegeivel). A naplófájlokat biztonságosan, megfelelő hozzáférés-korlátozásokkal kell tárolni, hogy csak illetékes rendszergazdák férhessenek hozzá, megelőzve a naplóadatok manipulációját vagy kiszivárgását.
API verziókezelés: A tervezés során gondoskodni kell az API verziókövetéséről. Minden API interfészt el kell látni verziószámmal, és ha a jövőben változtatások, bővítések történnek, az új verziókat a korábbiaktól elkülönítve kell kezelni. Ezzel biztosítható a visszamenőleges kompatibilitás: a külső rendszerek a régebbi API-verziót is elérhetik, elkerülve a kompatibilitási problémákat a változtatások bevezetésekor.
Hibakezelés és HTTP státuszkódok használata: Ügyelni kell arra, hogy a rendszer által visszaadott hibaüzenetek ne tartalmazzanak bizalmas információkat vagy belső részleteket (pl. stack trace, adatbázis lekérdezés), amelyek segítséget nyújthatnának egy támadónak a rendszer sebezhetőségeinek feltárásában. A válaszokban alkalmazzunk szabványos HTTP státuszkódokat a kliens tájékoztatására: például 200 OK a sikeres műveletekre, 400 Bad Request a hibás kérésekre, 401 Unauthorized az authentikáció hiányára, 500 Internal Server Error a szerver oldali hibákra stb.. Ez segíti a kliens oldali hibakezelést és a hibák gyors azonosítását a szabványos keretek között.
Biztonsági best-practice-ek követése: A fejlesztés és implementáció során alkalmazni kell az iparági bevált gyakorlatokat és ajánlásokat az API-k biztonságának növelésére. Javasolt referenciák például az OWASP API Security Top 10 útmutatásai, amelyek rámutatnak a leggyakoribb API sebezhetőségekre és azok elkerülésének módjaira. Szabványos biztonsági keretrendszerek és eszközök használata (pl. kész autentikációs és autorizációs modulok) további védelmet és megbízhatóságot nyújtanak.
Hatékony adatformátum használata: Az interfészek tervezésénél preferálni kell a JSON formátumú adatcserét az XML helyett. A JSON formátum jóval tömörebb és böngészők/szerverek számára natívan támogatott, így használata csökkenti az adatforgalom méretét és a feldolgozás idejét. Például ugyanazon információ JSON formátumban jelentősen kisebb méretű lehet, mint XML-ben (akár csak 15 kB JSON vs. 50 kB XML), ami gyorsabb átvitelhez és kevesebb erőforrás-felhasználáshoz vezet mind kliens, mind szerver oldalon. Ez különösen fontos mobil eszközöknél és nagy mennyiségű naplóadat esetében.
Réteges architektúra és skálázhatóság: A rendszer tervezésekor layered architecture elvet kell követni. A kliens és szerver komponensek legyenek világosan szétválasztva, és közöttük szükség esetén köztes rétegek iktathatók be a skálázhatóság érdekében. Például használjunk proxy szervereket vagy terheléselosztókat a kliens és LEMP szerver között, hogy több párhuzamos kérést tudjunk kezelni és javítsuk a teljesítményt. A biztonsági funkciókat (hitelesítés, jogosultságkezelés, naplózás) érdemes külön rétegként kezelni a rendszerben, így ezek hozzáadása vagy módosítása nem befolyásolja közvetlenül az üzleti logikát vagy a kliens-szerver kommunikációt. Ez a többrétegű megközelítés növeli a rendszer rugalmasságát, karbantarthatóságát és biztonságát, valamint lehetővé teszi a későbbi bővítést anélkül, hogy a teljes rendszert újra kellene tervezni.
Forrás: A fenti követelménylista kizárólag a feltöltött PDF dokumentum adatai és előírásai alapján készült, külső források vagy feltételezések hozzáadása nélkül. Minden pont a Lokális Energiamenedzsment Platform (LEMP) és a Közintézményi Energiamenedzsment Platform (KEP) rendszerek interfész specifikációjában foglalt elvárásokat tükrözi.